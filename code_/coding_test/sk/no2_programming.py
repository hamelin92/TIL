from pprint import pprint

def solution(n, clockwise):
	answer = [[0]*n for _ in range(n)] # 0으로 이루어진 n*n 그리드
	cnt = 0 # n*n 그리드를 실제로 채워나가게 될 수
	if clockwise: #시계방향일때의 초기값
		di = [0, 1, 0, -1]
		dj = [1, 0, -1, 0]
		ni = [0, 0, n - 1, n - 1]
		nj = [0, n - 1, n - 1, 0]
	else: #반시계방향일때의 초기값
		di = [1, 0, -1, 0]
		dj = [0, 1, 0, -1]
		ni = [0, n-1, n - 1, 0]
		nj = [0, 0, n - 1, n-1]
	for k in range(n//2): # 꺾는 횟수
		for i in range(n-2*k-1): # 몇번째 꺾었는지에 따라 직진하는 칸수
			cnt += 1
			nk = [k%4, (k+1)%4, (k+2)%4, (k+3)%4] # 각각의 시작점에 따라 k값에 따라 어떤 방향으로 나아가야 할지 정하기 위한 인덱스
			# 4가지의 시작점을 동시에 계산
			answer[ni[0] + i * di[nk[0]]][nj[0] + i * dj[nk[0]]] = cnt
			answer[ni[1] + i * di[nk[1]]][nj[1] + i * dj[nk[1]]] = cnt
			answer[ni[2] + i * di[nk[2]]][nj[2] + i * dj[nk[2]]] = cnt
			answer[ni[3] + i * di[nk[3]]][nj[3] + i * dj[nk[3]]] = cnt
			if i == n - 2 * k - 2: # 끝에 다다랐을 때 시작점을 갱신해주기 위한 if문
				ni[0] += i * di[nk[0]]
				nj[0] += i * dj[nk[0]]
				ni[1] += i * di[nk[1]]
				nj[1] += i * dj[nk[1]]
				ni[2] += i * di[nk[2]]
				nj[2] += i * dj[nk[2]]
				ni[3] += i * di[nk[3]]
				nj[3] += i * dj[nk[3]]
		else: # for 문이 종료되고 꺽고나서 적용될 시작점을 계산
			ni[0] += di[(nk[0]+1)%4]
			nj[0] += dj[(nk[0]+1)%4]
			ni[1] += di[(nk[1]+1)%4]
			nj[1] += dj[(nk[1]+1)%4]
			ni[2] += di[(nk[2]+1)%4]
			nj[2] += dj[(nk[2]+1)%4]
			ni[3] += di[(nk[3]+1)%4]
			nj[3] += dj[(nk[3]+1)%4]
	else: # 홀수 케이스에 대해서 중앙의 값을 채워주기 위함
		if answer[n//2][n//2] == 0:
			answer[n // 2][n // 2] = n**2//4 + 1

	return answer











'''
문제 설명
자연수 n과 시계/반시계 방향을 결정하는 boolean 값 clockwise가 주어집니다. 입출력 예 설명의 그림과 같이 소용돌이 모양(clockwise가 참이면 시계방향, 거짓이면 반시계방향)으로 n x n 정수 배열을 채워 return 하도록 solution 함수를 완성해주세요.

제한사항
n은 1 이상 1,000 이하입니다.
입출력 예(파이썬을 제외한 언어)
n	clockwise	result
5	true	[[1,2,3,4,1],[4,5,6,5,2],[3,6,7,6,3],[2,5,6,5,4],[1,4,3,2,1]]
6	false	[[1,5,4,3,2,1],[2,6,8,7,6,5],[3,7,9,9,8,4],[4,8,9,9,7,3],[5,6,7,8,6,2],[1,2,3,4,5,1]]
9	false	[[1,8,7,6,5,4,3,2,1],[2,9,14,13,12,11,10,9,8],[3,10,15,18,17,16,15,14,7],[4,11,16,19,20,19,18,13,6],[5,12,17,20,21,20,17,12,5],[6,13,18,19,20,19,16,11,4],[7,14,15,16,17,18,15,10,3],[8,9,10,11,12,13,14,9,2],[1,2,3,4,5,6,7,8,1]]
입출력 예(파이썬)
n	clockwise	result
5	True	[[1,2,3,4,1],[4,5,6,5,2],[3,6,7,6,3],[2,5,6,5,4],[1,4,3,2,1]]
6	False	[[1,5,4,3,2,1],[2,6,8,7,6,5],[3,7,9,9,8,4],[4,8,9,9,7,3],[5,6,7,8,6,2],[1,2,3,4,5,1]]
9	False	[[1,8,7,6,5,4,3,2,1],[2,9,14,13,12,11,10,9,8],[3,10,15,18,17,16,15,14,7],[4,11,16,19,20,19,18,13,6],[5,12,17,20,21,20,17,12,5],[6,13,18,19,20,19,16,11,4],[7,14,15,16,17,18,15,10,3],[8,9,10,11,12,13,14,9,2],[1,2,3,4,5,6,7,8,1]]
입출력 예 설명
입출력 예 #1

clockwise가 참이므로, 소용돌이를 시계방향으로 돌려야 합니다.
다음 그림은 5x5 정사각형을 시계방향 소용돌이 모양으로 채운 모습입니다.
ex1.png
입출력 예 #2

clockwise가 거짓이므로, 소용돌이를 반시계방향으로 돌려야 합니다.
다음 그림은 6x6 정사각형을 반시계방향 소용돌이 모양으로 채운 모습입니다.
ex2.png
입출력 예 #3

clockwise가 거짓이므로, 소용돌이를 반시계방향으로 돌려야 합니다.
다음 그림은 9x9 정사각형을 반시계방향 소용돌이 모양으로 채운 모습입니다.
ex3.png
'''